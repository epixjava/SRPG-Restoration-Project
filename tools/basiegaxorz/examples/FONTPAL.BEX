' FONTPAL and Font Modification example
' - Devster is not responsible for any seizures/etc.

	' The foreground part of the font will now use pallette
	' entry 2 instead of 0 because entry 0 is transparent, and
	' entry 2 is solid
	option FontBackEntry,2
	psgvol 0,15

	' We want tile 0 (default blank for font set) to be
	' transparent to make the rest of the text stand out. If
	' you're curious, you can comment this line out to see what
	' happens. Also I can load a transparent tile anywhere else
	' in vram. I feel like loading it at character * also ;D
	loadtiles transparent,1,0
	loadtiles transparent,1,asc("*")

	' Print our text the user will see
	for temp=0 to 3
		ink temp
		print " Different colors using FONTPAL "
		print
	next

	ink 0
	locate 10,0
	print "********          "
	print "******** */****\* "
	print "******** ******** "
	print "******** ******** "
	print "********          "
	print "***********    ***"
	print "***********    ***"
	print "********          "
	print "********    **    "
	print "********   ****   "


	psgcounter=0

	do while 1
		for counter=0 to 31
			for temp=0 to 3
				' Switch to a different drawing color
				ink temp
				
				' We use [and] &h1F because it is faster than
				' using modulo. same as (counter+temp) % 32
				refreshcolors=(counter+temp) [and] &h1F
				
				' Wait for (1/60) sec and make sure we are in
				' blank after sleep so colors don't change
				' half-way through the screen
				sleep 1, TVBLANK
				
				' Call our sub to change the text pallette
				gosub refreshcolors
				
				' Has nothing to do with the text, but creates
				' that cool strobe effect to the transparant
				' pixels. If you were to comment line 10 out,
				' no transparant pixels would have been drawn.
				' Also, temp<<1 is the same as temp*2 but is
				' faster
				pallette rgb(temp<<1,temp<<1,temp<<1),0,0

				' What the hell? sound fx?
				psg 0,psgcount
				psgcount=psgcount+138 [and] &h07FF
			next
		next
	loop

refreshcolors:
	' We increment by every 4th number because the numbers
	' in between represent the background color, not the
	' foreground color
	select case refreshcolors
		' We are only affecting the foreground pallette of the
		' font because we have ignored the second argument
		case 0:		fontpal rgb(7,7,0): exit case
		case 4:		fontpal rgb(7,0,7): exit case
		case 8:		fontpal rgb(0,7,7): exit case
		case 12:	fontpal rgb(2,5,7): exit case
		case 16:	fontpal rgb(3,3,0): exit case
		case 20:	fontpal rgb(3,0,3): exit case
		case 24:	fontpal rgb(0,3,3): exit case
		case 28:	fontpal rgb(2,7,5): exit case
	end select
	' refreshcolors [and] &h3 is the same as refreshcolors % 4
	' to only get numbers between 0 and 3
	select case refreshcolors [and] &h3
		' We ignore the the first argument in fontpal because
		' we don't want to change the foreground color of the
		' pallette
		case 0:		fontpal ,rgb(7,0,0): exit case
		case 1:		fontpal ,rgb(0,7,0): exit case
		case 2:		fontpal ,rgb(0,0,7): exit case
		case 3:		fontpal ,rgb(4,3,2): exit case
	end select
	return

transparent:
	datalong $00000000
	datalong $00000000
	datalong $00000000
	datalong $00000000
	datalong $00000000
	datalong $00000000
	datalong $00000000
	datalong $00000000

	option TITLE,"VERTICLE+HORIZONTAL Interrupts"

	dim sel as integer
	dim col as integer
	dim vintset as integer
	dim joy as integer
	dim start_hold as integer

	' Set our horizontal blanking interrupter routine to jump to
	' "raster" every horizontal blank
	on hblank gosub raster
	' Make horizontal interrupts occur every other line
	hblank 1
	' Set our verticle blanking interrupter routine to jump to
	' "vint" every verticle blank
	on vblank gosub vint

	' We don't like CGA pallettes, so set some darker ones for
	' foreground text
	pallette &h0800,0,1
	pallette &h0060,1,1

	' I wanna draw some text in SCROLL_A (SCROLL_A has more
	' priority than SCROLL_B)
	settextplane SCROLL_A
	' Draw text with pallette 0 and reposition the cursor
	ink 0: locate 5,0
	' Draw the bullshit text to the screen
	print "               WOW!"
	print "          Raster Effects"
	print "      Using Horizontal Blanks!"

	' I wanna draw some text in SCROLL_B
	settextplane SCROLL_B
	' Draw text with pallette 1 and reposition the cursor
	ink 1: locate 15,0
	' Draw the bullshit text to the screen
	print "               WOW!"
	print "          Raster Effects"
	print "      Using Horizontal Blanks!"

	' Now that we've finished all our setup, end the main
	' code and enable both interrupts
	enable INTERRUPTVBLANK
	enable INTERRUPTHBLANK
	end

' Verticle interrupt
vint:
	' In breif, this section of code is what shifts colors
	' between screen blankings. If this code weren't to exist,
	' the bars on the screen would be stationary. We want to
	' check if sel is 0 (sel is set by pressing the START
	' button) because we only want to see the bars shift when
	' the horizontal interrupt handle is for raster (not raster2).
	' If "IF sel=0 THEN" didn't exist, we would still see bars
	' shifting during raster2.
	if sel=0 then
		' Shifting the bars every interrupt is too fast for us, so
		' shift the bars every 10th verticle interrupt (10/60 sec)
		vintset++
		if vintset=10 then
			' Reset counter back to 0 so we can increment it again
			vintset=0
			' Now the tricky part. Since interrupters do no occur
			' within interrupters, we are safe to set variables
			' used by interrupters in another interrupter code. These
			' two lines of code is the heart to the phase shifting of
			' the bars. When the verticle interrupter is completed, we
			' should be in main code, and a horizontal interrupter should
			' trigger shortly after the screen starts to be drawn. Again,
			' these two lines set what bar will be drawn first. Obviously
			' we add one to col, and then [and] it with 3 so we only end
			' up with the lowest 2 bits (so its not any bigger than 3)
			col=col+1 [and] &h3
			' Reload the data pointer because it doesn't reload itself.
			' col is shifter to the left by one because reload wants
			' offsets in bytes, no integers (words, 2 byte data carriers)
			reload pallettes,col<<1
		endif
	endif

	' Our second piece of code
	' This is mainly for shifting the screen around (the text, not the bars
	' on the screen), and toggling between using rasters in pallette 0,0
	' (our background color) and pallette 0,1 (foreground color for text in
	' SCROLL_A)
	joy=joypad()
	' UP Button pressed
	if joy.0 then
		' Set scrolling plane to SCROLL_A because we want to scroll text in
		' SCROLL_A
		setscrollplane SCROLL_A
		' Scroll in the direction we've pressed
		scroll UP,1
		' Set scrolling plane to SCROLL_B because we want to scroll text in
		' SCROLL_B now
		setscrollplane SCROLL_B
		' Scroll in the direction opposite to what was pressed to make a
		' cool "effect"
		scroll DOWN,1
	endif
	' DOWN Button pressed
	if joy.1 then
		' Read code for the UP button for full comments
		setscrollplane SCROLL_A
		scroll DOWN,1
		setscrollplane SCROLL_B
		scroll UP,1
	endif
	' LEFT Button pressed
	if joy.2 then
		' Read code for the UP button for full comments
		setscrollplane SCROLL_A
		scroll LEFT,1
		setscrollplane SCROLL_B
		scroll RIGHT,1
	endif
	' RIGHT Button pressed
	if joy.3 then
		' Read code for the UP button for full comments
		setscrollplane SCROLL_A
		scroll RIGHT,1
		setscrollplane SCROLL_B
		scroll LEFT,1
	endif

	' START button pressed
	if joy.7 then
		' Execute code below only if we've released the
		' START button if it was pressed before
		if start_hold=0 then
			' If sel is 0 now it's 1. If it was 1 now it's 0
			sel=1-sel
			' Decide whether sel is 0 or 1
			if sel=0 then
				' If it's 0, then reset our horizontal blanking interrupt
				' to jump to raster (not raster2) so that bars are drawn
				' on the background of the screen
				on hblank gosub raster
			else
				' If it's 1, then reset our horizontal blanking interrupt
				' to jump to raster2 (not raster) so that bars are drawn
				' on the foreground of text on SCROLL_A
				on hblank gosub raster2
			endif
			' We just pressed the START button, so tell us that next time
			' we come back to this code
			start_hold=1
		endif
	else
		' START button was released, so now we can press it again
		start_hold=0
	endif

	' We are finally done! now return to main code
	return

' Horizontal Interrupter 1
'  - Default horizontal interrupt, press START twice
'    to enable it back again
raster:
	' Read a color from out pallette data table and set it
	' to the background color
	pallette readint(),0,0
	' We don't want to keep drawing the same color, so increase
	' the color holder by 1, and if the holder overflows (greater
	' than 3 because we only have 4 colors), then set it back to 0
	col++
	if col=4 then
		' col is set to 0
		col=0
		' Reset the data pointer to where we started
		reload pallettes
	endif
	' Return to main code
	return

' Horizontal Interrupter 2
'  - Second horizontal interrupt, press START once
'    to enable it. Look at raster label for full comments
raster2:
	pallette readint(),0,1
	col++
	if col=4 then
		col=0
		reload pallettes
	endif
	return

pallettes:
	dataint	&h0E6A,&h0E80,&h06C2,&h0A6E
